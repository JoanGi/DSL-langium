/******************************************************************************
 * This file was generated by langium-cli 0.2.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, Reference, isAstNode } from 'langium';

export interface Attribute extends AstNode {
    readonly $container: Instance;
    attType: ATtype
    name: string
}

export const Attribute = 'Attribute';

export function isAttribute(item: unknown): item is Attribute {
    return reflection.isInstance(item, Attribute);
}

export interface Declaration extends AstNode {
    readonly $container: Model;
    name: string
}

export const Declaration = 'Declaration';

export function isDeclaration(item: unknown): item is Declaration {
    return reflection.isInstance(item, Declaration);
}

export interface Instance extends AstNode {
    readonly $container: DatasetDefinition;
    attributes: Array<Attribute>
    name: string
    type: Type
}

export const Instance = 'Instance';

export function isInstance(item: unknown): item is Instance {
    return reflection.isInstance(item, Instance);
}

export interface Model extends AstNode {
    declarations: Array<Declaration>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface Author extends Declaration {
    email: string
}

export const Author = 'Author';

export function isAuthor(item: unknown): item is Author {
    return reflection.isInstance(item, Author);
}

export interface DatasetDefinition extends Declaration {
    description: string
    instances: Array<Instance>
}

export const DatasetDefinition = 'DatasetDefinition';

export function isDatasetDefinition(item: unknown): item is DatasetDefinition {
    return reflection.isInstance(item, DatasetDefinition);
}

export interface Requeriment extends Declaration {
    desName: Reference<Attribute>
    reporter: Reference<Author>
}

export const Requeriment = 'Requeriment';

export function isRequeriment(item: unknown): item is Requeriment {
    return reflection.isInstance(item, Requeriment);
}

export type ATtype = 'int' | 'string' | 'bool'

export type Type = 'people' | 'images' | 'raw'

export type OpType = 'grater' | 'lower' | 'equal'

export type QualifiedName = string

export type SecondAstType = 'Attribute' | 'Declaration' | 'Instance' | 'Model' | 'Author' | 'DatasetDefinition' | 'Requeriment';

export type SecondAstReference = 'Requeriment:desName' | 'Requeriment:reporter';

export class SecondAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['Attribute', 'Declaration', 'Instance', 'Model', 'Author', 'DatasetDefinition', 'Requeriment'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case Author:
            case DatasetDefinition:
            case Requeriment: {
                return this.isSubtype(Declaration, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(referenceId: SecondAstReference): string {
        switch (referenceId) {
            case 'Requeriment:desName': {
                return Attribute;
            }
            case 'Requeriment:reporter': {
                return Author;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
}

export const reflection = new SecondAstReflection();
